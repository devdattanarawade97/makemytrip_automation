/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package synergyboat_solutions;

import org.testng.Assert;
import org.testng.annotations.*;

import com.google.common.base.Verify;

import io.qameta.allure.Description;
import io.qameta.allure.Epic;
import io.qameta.allure.Feature;
import io.qameta.allure.Step;
import io.qameta.allure.Story;
import synergyboat_solutions.pages.*;
import synergyboat_solutions.utility.Methods;

import static org.testng.Assert.*;

import org.openqa.selenium.WebDriver;

public class AppTest {

    static WebDriver driver;
    static HomePage homePage;
    static FlightPage flightPage;

    // before class
    /**
     * Method annotated with @BeforeClass to initialize a new WebDriver instance and
     * instantiate HomePage and FlightPage objects before the test class execution
     * begins.
     * 
     * This method initializes a WebDriver instance using Methods.invokeDriver(),
     * and
     * then initializes homePage and flightPage objects with the WebDriver instance.
     */
    @BeforeClass
    public static void invokeNewDriver() {

        try {
            // Initialize a new WebDriver instance using Methods.invokeDriver()
            driver = Methods.invokeDriver();
            // Instantiate a HomePage object with the WebDriver instance
            homePage = new HomePage(driver);
            // Instantiate a FlightPage object with the WebDriver instance
            flightPage = new FlightPage(driver);
        } catch (Exception e) {
            // Catch and handle any exceptions that occur during WebDriver initialization
            Methods.catchException(e);
        }

    }

    /**
     * Test case to verify invalid date selection functionality.
     * 
     * @param url       The URL of the application under test.
     * @param monthYear The month and year for selecting the departure date.
     * @param date      The specific date to be selected.
     */
    @Test(description = "Verify invalid date selection")
    @Parameters({ "URL", "MonthAndYear", "Date" })
    public static void Testcase01_verifyInvalidDateSelection(String url, String monthYear, String date) {

        try {

            // Attempt to load the home page with the provided URL
            boolean status = homePage.getHomePage(url);
            // Assert that the home page loaded successfully
            Assert.assertTrue(status, "Failed to load home page.");
            // Validate the departure date selection with the provided month and date
            status = homePage.validateDepartureDate(monthYear, date);
            // Assert that an invalid date was not successfully selected
            Assert.assertFalse(status, "Invalid date was selected.");
        } catch (Exception e) {
            Methods.catchException(e);
        }

    }

    /**
     * Test case to verify that regular fare is selected as default on the home
     * page.
     * 
     * @param url         The URL of the application under test.
     * @param defaultFair The expected default fare to be validated.
     */
    @Test(description = "Verify regular fare is selected as default")
    @Parameters({ "URL", "Default_Fair" })
    public static void Testcase02_verifyRegularFairSelectedAsDefault(String url, String defaultFair) {

        try {

            // Navigate to home page
            boolean status = homePage.getHomePage(url);
            Assert.assertTrue(status, "Failed to load home page.");

            // Validate default fare
            status = homePage.validateDefaultFair(defaultFair);
            Assert.assertTrue(status, "Default fare is not selected.");
        } catch (Exception e) {

            Methods.catchException(e);
        }
    }

    //
    /**
     * Test case to verify the functionality of swapping To & From sections on the
     * home page.
     * 
     * @param url                  The URL of the application under test.
     * @param monthYear            The month and year for selecting the departure
     *                             date.
     * @param date                 The specific date for selecting the departure
     *                             date.
     * @param expectedFrom         The expected 'From' location to be selected.
     * @param expectedTo           The expected 'To' location to be selected.
     * @param expectedFromLocation The expected location name for 'From'.
     * @param expectedToLocation   The expected location name for 'To'.
     */

    @Test(description = "Verify user can click on the swap button which will reverse the To & From section")
    @Parameters({ "URL", "MonthAndYear", "Date", "From", "To", "ExpectedFromLocation", "ExpectedToLocation" })
    public static void Testcase03_verifyToAndFromSwitchFunctionality(String url, String monthYear, String date,
            String expectedFrom, String expectedTo, String expectedFromLocation, String expectedToLocation) {

        // variables

        boolean status = false;

        try {

            // Navigate to home page
            status = homePage.getHomePage(url);
            Assert.assertTrue(status, "Failed to load home page.");

            // Select locations
            status = Methods.selectLocation(expectedFrom, expectedTo, expectedFromLocation, expectedToLocation);
            Assert.assertTrue(status, "Failed to select locations.");

            // Validate departure date
            status = homePage.validateDepartureDate(monthYear, date);
            Assert.assertTrue(status, "Failed to validate departure date.");

            // Validate To & From switch functionality
            status = HomePage.validateToAndFromSwitch(expectedTo, expectedFrom, expectedToLocation,
                    expectedFromLocation);
            Assert.assertTrue(status, "Failed to validate To & From switch functionality.");
        } catch (Exception e) {
            // Catch any exceptions that occur during test execution
            Methods.catchException(e);
        } finally {

        }

    }

    /**
     * Test case to verify the major flow functionality including location
     * selection,
     * date validation, search results, sorting by airline, and verifying flight
     * count.
     * 
     * @param url                  The URL of the application under test.
     * @param monthYear            The month and year for selecting the departure
     *                             date.
     * @param date                 The specific date for selecting the departure
     *                             date.
     * @param expectedFrom         The expected 'From' location to be selected
     *                             initially.
     * @param expectedTo           The expected 'To' location to be selected
     *                             initially.
     * @param expectedFromLocation The expected location name for 'From'.
     * @param expectedToLocation   The expected location name for 'To'.
     * @param changedFromLocation  The changed 'From' location to be selected.
     * @param sortByAirline        The airline to sort the results by.
     */

    @Test(description = "Verify the major flow functionality")
    @Parameters({ "URL", "MonthAndYear", "NewDate", "From", "To", "ExpectedFromLocation", "ExpectedToLocation",
            "ChangedFromLocation", "SortByAirline" })
    public static void Testcase04_Major_flow(String url, String monthYear, String date,
            String expectedFrom, String expectedTo, String expectedFromLocation, String expectedToLocation,
            String changedFromLocation, String sortByAirline) {

        try {
            // Create instances of the HomePage and FlightPage classes

            // Navigate to home page
            boolean status = homePage.getHomePage(url);
            Assert.assertTrue(status, "Failed to load home page.");

            // Select initial locations
            status = Methods.selectLocation(expectedFrom, expectedTo, expectedFromLocation, expectedToLocation);
            Assert.assertTrue(status, "Failed to select initial locations.");

            // Validate departure date
            status = homePage.validateDepartureDate(monthYear, date);
            Assert.assertTrue(status, "Failed to validate departure date.");

            // Search results
            HomePage.searchResult();

            // Validate 'not found' message
            status = Methods.validateNotFound();
            Assert.assertTrue(status, "Failed to validate 'not found' message.");

            // Select changed 'From' location
            status = Methods.selectLocation(changedFromLocation, expectedTo, expectedFromLocation, expectedToLocation);
            Assert.assertTrue(status, "Failed to select changed locations.");

            // Search results again
            HomePage.searchResult();

            // Count total flights before sorting
            int flightCountBeforeSort = flightPage.countTotalFlights();
            Assert.assertTrue(flightCountBeforeSort > 0, "No flights found before sorting.");

            // Sort results by expected airline
            flightPage.sortResultsByExpectedAirline(sortByAirline);

            // Count total flights after sorting
            int flightCountAfterSort = flightPage.countTotalFlights();
            Assert.assertTrue(flightCountAfterSort > 0, "No flights found after sorting.");

            // Verify number of flights for filter
            status = flightPage.verifyNumberOfFlightsForFilter(flightCountAfterSort, flightCountBeforeSort);
            Assert.assertTrue(status, "Failed to verify number of flights for filter.");
        } catch (Exception e) {
            // Catch any exceptions that occur during test execution
            Methods.catchException(e);
        }
    }

    /**
     * After completing all tests in the class, this method ensures that the
     * WebDriver
     * instance is properly closed and resources are released.
     */
    @AfterClass
    public static void closeDriver() {
        // Catch any exceptions that occur during driver closing
        if (driver != null) {
            Methods.quitDriver();
        }

    }

}
